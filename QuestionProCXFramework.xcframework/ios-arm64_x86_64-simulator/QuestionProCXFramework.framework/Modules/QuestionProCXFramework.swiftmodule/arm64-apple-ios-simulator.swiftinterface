// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios14-simulator -enable-objc-interop -enable-library-evolution -swift-version 6 -enforce-exclusivity=checked -O -module-name QuestionProCXFramework
import Foundation
import Security
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public let ksurveyURL: Swift.String
public let kisDialog: Swift.String
public let kKeyChainWrapperBundleId: Swift.String
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class GMDCircleLoader : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency final public let GMD_SPINNER_COLOR: UIKit.UIColor
  @_Concurrency.MainActor @preconcurrency public static let GMD_SPINNER_FRAME: CoreFoundation.CGRect
  @_Concurrency.MainActor @preconcurrency final public let GMD_SPINNER_IMAGE: CoreFoundation.CGRect
  @_Concurrency.MainActor @preconcurrency final public let GMD_IMAGE: UIKit.UIImage?
  @_Concurrency.MainActor @preconcurrency final public let GMD_SPINNER_LINE_WIDTH: Swift.Double
  @_Concurrency.MainActor @preconcurrency public var backgroundLayer: QuartzCore.CAShapeLayer!
  @_Concurrency.MainActor @preconcurrency public var isSpinning: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public static func setOnView(_ view: UIKit.UIView, withTitle title: Swift.String, animated: Swift.Bool) -> QuestionProCXFramework.GMDCircleLoader
  @_Concurrency.MainActor @preconcurrency public static func hideFromView(_ view: UIKit.UIView, animated: Swift.Bool) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public static func HUDForView(_ view: UIKit.UIView) -> QuestionProCXFramework.GMDCircleLoader?
  @_Concurrency.MainActor @preconcurrency public func setup()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency public func drawBackgroundCircle(partial: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func start()
  @_Concurrency.MainActor @preconcurrency public func stop()
  @objc deinit
}
public class TouchPoint {
  public init()
  public enum DataCenter {
    case DATA_CENTER_US
    case DATA_CENTER_AE
    case DATA_CENTER_CA
    case DATA_CENTER_AU
    case DATA_CENTER_EU
    case DATA_CENTER_SG
    case DATA_CENTER_SA
    case DATA_CENTER_KSA
    public static func == (a: QuestionProCXFramework.TouchPoint.DataCenter, b: QuestionProCXFramework.TouchPoint.DataCenter) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var surveyId: Swift.Int
  public var email: Swift.String
  public var firstName: Swift.String
  public var lastName: Swift.String
  public var mobile: Swift.String
  public var segmentCode: Swift.String
  public var transactionLanguage: Swift.String
  public var ShowInDialog: Swift.Bool
  public var customVariable1: Swift.String
  public var customVariable2: Swift.String
  public var customVariable3: Swift.String
  public func initTouchPoint(surveyId: Swift.Int) -> QuestionProCXFramework.TouchPoint
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor public class QuestionProCXManager : ObjectiveC.NSObject, UIKit.UIAlertViewDelegate, QuestionProCXFramework.CXServiceDelegate, WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor public func CXServiceResponse(withURL response: [Swift.String : Any])
  @_Concurrency.MainActor public var iBaseWindow: UIKit.UIWindow?
  @_Concurrency.MainActor public var iView: UIKit.UIView?
  @_Concurrency.MainActor public var iWebView: WebKit.WKWebView?
  @_Concurrency.MainActor public var iResponseURL: Swift.String?
  @_Concurrency.MainActor public var iPopupMenuTitle: Swift.String?
  @_Concurrency.MainActor public var iPopupMenuMessage: Swift.String?
  @_Concurrency.MainActor public var iPopupMenuRightButtonTitle: Swift.String?
  @_Concurrency.MainActor public var iPopupMenuLeftButtonTitle: Swift.String?
  @_Concurrency.MainActor public var iPopUpViewFlag: Swift.Bool
  @_Concurrency.MainActor public var iPresentViewFlag: Swift.Bool
  @_Concurrency.MainActor public var iTouchPointName: Swift.Int?
  @_Concurrency.MainActor public var iApiKey: Swift.String?
  @_Concurrency.MainActor public var iCurrentViewName: Swift.String
  @_Concurrency.MainActor public var iDataCenter: QuestionProCXFramework.TouchPoint.DataCenter?
  @_Concurrency.MainActor public var touchPoint: QuestionProCXFramework.TouchPoint?
  @_Concurrency.MainActor @objc override dynamic public init()
  @_Concurrency.MainActor public static let sharedManager: QuestionProCXFramework.QuestionProCXManager
  @_Concurrency.MainActor public func initwithAPIKey(apiKey: Swift.String, dataCenter: QuestionProCXFramework.TouchPoint.DataCenter, withWindow aWindow: UIKit.UIWindow)
  @_Concurrency.MainActor public func touchPointBuilder(touchPointID: Swift.Int) -> QuestionProCXFramework.TouchPoint
  @_Concurrency.MainActor public func launchFeedbackSurvey(touchPoint: QuestionProCXFramework.TouchPoint)
  @_Concurrency.MainActor public func stopQuestionProCXManager()
  @_Concurrency.MainActor public func setPopupMenuTitle(aTitle: Swift.String, message aMessage: Swift.String, rightButtonTitle aRightButtonTitle: Swift.String, leftButtonTitle aLeftButtonTitle: Swift.String)
  @_Concurrency.MainActor public func getAPIResponse(touchPoint: QuestionProCXFramework.TouchPoint)
  @_Concurrency.MainActor public func showMessageInViewControllerWithResponse(touchPoint: QuestionProCXFramework.TouchPoint)
  @_Concurrency.MainActor public func showInAppSurvey(touchPoint: QuestionProCXFramework.TouchPoint)
  @_Concurrency.MainActor @objc public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping @_Concurrency.MainActor @Sendable (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, didStartProvisionalNavigation navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  @_Concurrency.MainActor public func currentViewLoaded()
  @_Concurrency.MainActor public func currentViewUnLoaded()
  @objc deinit
}
@_Concurrency.MainActor public protocol CXServiceDelegate : ObjectiveC.NSObjectProtocol {
  @_Concurrency.MainActor func CXServiceResponse(withURL response: [Swift.String : Any])
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor public class MobileCXServiceTxManager : ObjectiveC.NSObject, Foundation.URLSessionDelegate, Foundation.URLSessionTaskDelegate, Foundation.URLSessionDataDelegate {
  @_Concurrency.MainActor public var response: Foundation.URLResponse?
  @_Concurrency.MainActor public var receivedData: Foundation.Data
  @_Concurrency.MainActor weak public var iDelegate: (any QuestionProCXFramework.CXServiceDelegate)?
  @_Concurrency.MainActor @objc override dynamic public init()
  @_Concurrency.MainActor public func invokeService(touchPoint: QuestionProCXFramework.TouchPoint, withAPIKey apikey: Swift.String, dataCenter: QuestionProCXFramework.TouchPoint.DataCenter)
  @_Concurrency.MainActor public func createCXRequestWithTouchPointID(touchPoint: QuestionProCXFramework.TouchPoint) -> Swift.String
  @_Concurrency.MainActor public func execute(method: Swift.String, baseUrl: Swift.String, path: Swift.String, body: Swift.String?, apiKey: Swift.String)
  @_Concurrency.MainActor public func printRequestDetails(request: Foundation.URLRequest)
  @objc nonisolated public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  @objc nonisolated public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive response: Foundation.URLResponse, completionHandler: @escaping (Foundation.URLSession.ResponseDisposition) -> Swift.Void)
  @objc nonisolated public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: (any Swift.Error)?)
  nonisolated public func urlSession(_ session: Foundation.URLSession, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @_Concurrency.MainActor public func handleHttpOK(data: Foundation.Data)
  @_Concurrency.MainActor public func processJson(json: [Swift.String : Any])
  @objc deinit
}
@_hasMissingDesignatedInitializers public class GlobalDataCX {
  public static func getDataCenterString(dataCenter: QuestionProCXFramework.TouchPoint.DataCenter) -> Swift.String
  public static func getBaseUrl(dataCenter: Swift.String) -> Swift.String
  public static func getUUIDValueFromKeyChain() -> Swift.String?
  public static func checkUUIDValueInKeyChain() -> Swift.Bool
  public static func addValueToUserDefault(_ aValue: Any, forKey aTouchPointIDKey: Swift.String)
  public static func addToUserDefault(_ value: Swift.Int, forKey key: Swift.String)
  public static func getValueFromUserDefault(_ key: Swift.String) -> Swift.Int?
  public static func deleteUserDefaultValue(forKey aTouchPointIDKey: Swift.String)
  public static func checkValueInUserDefault(forKey aTouchPointIDKey: Swift.String) -> [Swift.String : Any]?
  @objc deinit
}
public class KeychainItemWrapper {
  public var keychainItemData: [Swift.String : Any]
  public var genericPasswordQuery: [Swift.String : Any]
  public init(identifier: Swift.String, accessGroup: Swift.String?)
  public func setObject(_ inObject: Any?, forKey key: Swift.String)
  public func objectForKey(_ key: Swift.String) -> Any?
  public func resetKeychainItem()
  public func dictionaryToSecItemFormat(_ dictionaryToConvert: [Swift.String : Any]) -> [Swift.String : Any]
  public func secItemFormatToDictionary(_ dictionaryToConvert: [Swift.String : Any]) -> [Swift.String : Any]?
  public func writeToKeychain()
  public func isEqual(_ obj1: Any, _ obj2: Any) -> Swift.Bool
  @objc deinit
}
extension QuestionProCXFramework.TouchPoint.DataCenter : Swift.Equatable {}
extension QuestionProCXFramework.TouchPoint.DataCenter : Swift.Hashable {}
extension QuestionProCXFramework.QuestionProCXManager : Swift.Sendable {}
